What happens when you initialize a repository? Why do you need to do it?

When you init, a new folder called .git is created in the same directory and the files in the folder can become part of the respository.  You can run git status to see the status of the repo, as it will not do any initial commit for you.  You have to do the first commit, as it will let you create the commit message and this gives you a chance to make any changes before the first commit.

How is the staging area different from the working directory and the repository? What value do you think it offers?

The staging area offers a place to put files before committing them to the repo.  If making multiple changes, it may make more sense to stage files in groups that work together, and cut down on complexity.

Don't forget to run git checkout master before you commit to move to the HEAD which might be 'detached'.

How can you use the staging area to make sure you have one commit per logical change?

By making sure the files in the staging area are all involved with one change before doing a mass commit.


What are some situations when branches would be helpful in keeping your history organized? How would branches help?

A branch allows for experimentation off of the master branch, so you don't have to worry about having bad code that may not work, or you can test new things.  If they work out, you can merge in, if not, the branch can be left alone.


How do the diagrams help you visualize the branch structure?

They can show where branches split so you can tell if they were before/after a specific feature, and show the status of each branch.  